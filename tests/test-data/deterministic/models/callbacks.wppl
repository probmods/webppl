var make_callback = function() {
  var output = { setup: [], initialize: [], iteration: [], sample: [], finish: [] };
  var cb = {
    // Inference should pass a single argument, the number of
    // iterations that will be performed. We push this onto the
    // output.
    setup: _.bindKey(output.setup, 'push'),
    // MCMC calls this after collecting the initial trace. This pushes
    // true onto the output array when called.
    initialize: _.ary(_.bindKey(output.initialize, 'push', true), 0),
    // Inference calls this after each iteration, passing zero or more
    // arguments. Here we ignore any such arguments, and push true
    // onto the array each time we're called.
    iteration: _.ary(_.bindKey(output.iteration, 'push', true), 0),
    sample: _.bindKey(output.sample, 'push'),
    // Finished is called with zero arguments once inference is
    // complete. We push true onto the array when called.
    finish: _.ary(_.bindKey(output.finish, 'push', true), 0),
    output: output
  };
  return cb;
};

var summarize_output = function(output) {
  return {
    // This `setup` property will be the expected number of
    // iterations, false otherwise.
    setup: output.setup.length === 1 && output.setup[0],
    // `initialize` will be true if the initialize callback was
    // called, false otherwise.
    initialize: output.initialize.length === 1 && output.initialize[0],
    // `numIters` is the number of times the iteration callback was
    // called.
    numIters: output.iteration.length,
    // All inference algorithms are expected to provide an object with
    // at least a value property, though they may return an object
    // with additional properties. `numSamples` will be the number of
    // times the sample callback was invoked, unless it was called one
    // or more times with an object without `value` property, in which
    // case it will be false.
    numSamples: all(function(s) { return _.has(s, 'value'); }, output.sample) && output.sample.length,
    // `finish` will be true if the finish callback was called, false
    // otherwise.
    finish: output.finish.length === 1 && output.finish[0]
  };
};

var runTest = function(inferOpts) {
  var cb = make_callback();
  Infer(_.merge({model: constF('retval'), callbacks: [cb]}, inferOpts));
  return summarize_output(cb.output);
};

[
  runTest({method: 'MCMC', samples: 3}),
  runTest({method: 'MCMC', samples: 3, burn: 2}),
  runTest({method: 'MCMC', samples: 3, burn: 2, lag: 1}),
  runTest({method: 'rejection', samples: 3}),
  runTest({method: 'incrementalMH', samples: 3}),
  runTest({method: 'SMC', particles: 3}),
  runTest({method: 'SMC', particles: 3, rejuvSteps: 2}),
  runTest({method: 'optimize', samples: 3}),
  runTest({method: 'forward', samples: 3}),
];
