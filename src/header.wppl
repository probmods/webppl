'no caching';

// Distributions (note: this gets macro transformed)

defineDistConstructors(
    Bernoulli
    Uniform
    UniformDrift
    RandomInteger
    Gaussian
    GaussianDrift
    MultivariateGaussian
    Cauchy
    Discrete
    Gamma
    Exponential
    Beta
    Binomial
    Multinomial
    Poisson
    Dirichlet
    DirichletDrift
    Categorical);

// Helpers to sample from distributions.

var bernoulli = function(arg) {
  var params = dists.isParams(arg) ? arg : {p: arg};
  return sample(Bernoulli(params));
};

var randomInteger = function(arg) {
  var params = dists.isParams(arg) ? arg : {n: arg};
  return sample(RandomInteger(params));
};

var discrete = function(arg) {
  var params = dists.isParams(arg) ? arg : {ps: arg};
  return sample(Discrete(params));
};

var multinomial = function(arg1, arg2) {
  var params = dists.isParams(arg1) ? arg1 : {ps: arg1, n: arg2};
  return sample(Multinomial(params));
};

var gaussian = function(arg1, arg2) {
  var params = dists.isParams(arg1) ? arg1 : {mu: arg1, sigma: arg2};
  return sample(Gaussian(params));
};

var multivariateGaussian = function(arg1, arg2) {
  var params = dists.isParams(arg1) ? arg1 : {mu: arg1, cov: arg2};
  return sample(MultivariateGaussian(params));
};

var cauchy = function(arg1, arg2) {
  var params = dists.isParams(arg1) ? arg1 : {location: arg1, scale: arg2};
  return sample(Cauchy(params));
};

var uniform = function(arg1, arg2) {
  var params = dists.isParams(arg1) ? arg1 : {a: arg1, b: arg2};
  return sample(Uniform(params));
};

var dirichlet = function(arg) {
  var params = dists.isParams(arg) ? arg : {alpha: arg};
  return sample(Dirichlet(params));
};

var poisson = function(arg) {
  var params = dists.isParams(arg) ? arg : {mu: arg};
  return sample(Poisson(params));
};

var binomial = function(arg1, arg2) {
  var params = dists.isParams(arg1) ? arg1 : {p: arg1, n: arg2};
  return sample(Binomial(params));
};

var beta = function(arg1, arg2) {
  var params = dists.isParams(arg1) ? arg1 : {a: arg1, b: arg2};
  return sample(Beta(params));
};

var exponential = function(arg) {
  var params = dists.isParams(arg) ? arg : {a: arg};
  return sample(Exponential(params));
};

var gamma = function(arg1, arg2) {
  var params = dists.isParams(arg1) ? arg1 : {shape: arg1, scale: arg2};
  return sample(Gamma(params));
};

// Other distribution helpers

var flip = function(p) {
  var params = {p: (p !== undefined) ? p : .5};
  return sample(Bernoulli(params));
};

var categorical = function(arg1, arg2) {
  var params = dists.isParams(arg1) ? arg1 : {ps: arg1, vs: arg2};
  return params.vs[discrete(params.ps)];
};

var uniformDraw = function(arg) {
  var vs = dists.isParams(arg) ? arg.vs : arg;
  return vs[sample(RandomInteger({n: vs.length}))];
};

var Delta = function(params) {
  return Categorical({ps: [1.0], vs: [params.v]});
};

var serializeDist = function(d) {
  return dists.serialize(d);
};

var deserializeDist = function(JSONString) {
  return dists.deserialize(JSONString);
};

var withImportanceDist = function(d, importanceDist) {
  return dists.withImportanceDist(d, importanceDist);
};

// XRPs

var makeBetaBernoulli = function(pseudocounts) {
  globalStore.BBindex = 1 + (globalStore.BBindex || 0);
  var bbname = 'BB' + globalStore.BBindex;
  globalStore[bbname] = pseudocounts;
  return function() {
    var pc = globalStore[bbname];  // get current sufficient stats
    var val = sample(Bernoulli({p: pc[0] / (pc[0] + pc[1])}));  // sample from predictive.
    globalStore[bbname] = [pc[0] + val, pc[1] + !val];  // update sufficient stats
    return val;
  };
};

var makeDirichletDiscrete = function(pseudocounts) {
  var addCount = function(a, i, j) {
    var j = j || 0;
    if (a.length === 0) {
      return [];
    } else {
      return [a[0] + (i === j)].concat(addCount(a.slice(1), i, j + 1));
    }
  };
  globalStore.DDindex = 1 + (globalStore.DDindex || 0);
  var ddname = 'DD' + globalStore.DDindex;
  globalStore[ddname] = pseudocounts;
  return function() {
    var pc = globalStore[ddname];  // get current sufficient stats
    var val = sample(Discrete({ps: pc}));  // sample from predictive. (doesn't need to be normalized.)
    globalStore[ddname] = addCount(pc, val); // update sufficient stats
    return val;
  };
};

// Arithmetic and other functionals

var plus = function(a, b) {
  return a + b;
};
var minus = function(a, b) {
  return a - b;
};
var mult = function(a, b) {
  return a * b;
};
var div = function(a, b) {
  return a / b;
};

var and = function(a, b) {
  return a && b
}
var or = function(a, b) {
  return a || b
}

var eq = function(a, b) {
  return a === b;
};
var neq = function(a, b) {
  return a != b;
};
var lt = function(a, b) {
  return a < b;
};
var gt = function(a, b) {
  return a > b;
};
var leq = function(a, b) {
  return a <= b;
};
var geq = function(a, b) {
  return a >= b;
};

var isEven = function(v) {
  return v % 2 === 0;
};
var isOdd = function(v) {
  return v % 2 != 0;
};

var idF = function(x) {
  return x;
};
var constF = function(f) {
  return function() {
    return f;
  };
};
var falseF = function() {
  return false;
};
var trueF = function() {
  return true;
};

// Probability computations & calculations

var score = function(dist, val) {
  return dist.score(val);
};

var MAP = function(dist) {
  return dist.MAP();
};

var expectation = function(dist, func) {
  var f = func || idF;
  var supp = dist.support();
  return mapReduce1(plus,
                    function(s) {
                      return Math.exp(dist.score(s)) * f(s);
                    },
                    supp);
};

var entropy = function(dist) {
  return dist.entropy();
};

// Data structures & higher-order functions

var append = function(a, b) {
  return a.concat(b);
};
var cons = function(a, b) {
  return [a].concat(b);
};
var snoc = function(a, b) {
  return a.concat([b]);
};

var first = function(xs) {
  return xs[0];
};
var second = function(xs) {
  return xs[1];
};
var third = function(xs) {
  return xs[2];
};
var fourth = function(xs) {
  return xs[3];
};
var secondLast = function(xs) {
  return xs[xs.length - 2];
};
var last = function(xs) {
  return xs[xs.length - 1];
};

var most = function(xs) {
  return xs.slice(0, xs.length - 1);
}

var rest = function(xs) {
  return xs.slice(1);
};

var map_helper = function(i, j, f) {
  var n = j - i + 1;
  if (n == 0) {
    return []
  } else if (n == 1) {
    return [f(i)];
  } else {
    var n1 = Math.ceil(n / 2);
    return map_helper(i, i + n1 - 1, f).concat(map_helper(i + n1, j, f));
  }
}

// recursively split input array so that we only call
// concat a logarithmic number of times
var map = function(fn, l) {
  return map_helper(0, l.length - 1, function(i) { return fn(l[i]) })
}

// assumes that length l1 == length l2
var map2 = function(fn, l1, l2) {
  return map_helper(0, l1.length - 1, function(i) { return fn(l1[i], l2[i]) })
}

// sugar for map(f, [0,1,...,n-1])
var mapN = function(fn, n) {
  return map_helper(0, n - 1, function(i) { return fn(i) })
}

var mapIndexed = function(fn, l) {
  return map_helper(0, l.length - 1, function(i) { return fn(i, l[i]) })
}

var _ringAround = function(l, n) {
  return l.slice(n).concat(l.slice(0, n));
};

var ringForward = function(l, n) {
  return _ringAround(l, n === undefined ? -1 : -n);
};

var ringBackward = function(l, n) {
  return _ringAround(l, n === undefined ? 1 : n);
};

// map through the cartesian product l1 * l2
var mapPairs2 = function(f, l1, l2) {
  var res = map(function(a) {
    return map(function(b) {
      return f(a, b);
    }, l2)
  }, l1);
  return [].concat.apply([], res); // flatten
};

// map through all 2-combinations of elements in l
// e.g., mapPairsC(f, ['a','b','c']) will operate on ['a','b'],
// ['a','c'], and ['b','c']
var mapPairsC = function(f, l) {
  var n = l.length;

  var helper = function(i) {
    if (i === n) {
      return [];
    } else {
      // compute {f(i,j)} where j \in {i+1,...,n}
      var r = mapN(
          function(k) {
            var j = i + k + 1;
            return f(l[i], l[j])
          },
          n - (i + 1));

      return append(r, helper(i + 1))
    }
  }

  return helper(0);
};

// map through all 2-tuples of elements in l
// e.g., mapPairsC(f, ['a','b','c']) will operate on ['a','b'],
// ['a','c'], ['b','a'], ['b','c'], ['c','a'], ['c','b']
var mapPairsNC = function(f, l) {
  var res = mapPairs2(function(a, b) {
    return a === b ? undefined : f(a, b);
  }, l, l);
  return remove(undefined, res);
};

var mapObject = function(fn, obj) {
  return _.object(
      map(
      function(kv) {
        return [kv[0], fn(kv[0], kv[1])]
      },
      _.pairs(obj))
  );
};

var reduce = function(fn, init, ar) {
  var n = ar.length;
  var helper = function(i) {
    if (i === n) {
      return init
    } else {
      return fn(ar[i], helper(i + 1))
    }
  }

  return helper(0);
};

// sugar for reduce(f, g(init), map(g,ar))
var mapReduce = function(f, init, g, ar) {
  // specialized to above reduce
  return reduce(function(a, b) {return f(g(a), b);},
                g(init),
                ar);
};

// sugar for reduce(f, g(last(ar)), map(g, butLast(ar)))
var mapReduce1 = function(f, g, ar) {
  // specialized to above reduce
  return reduce(function(a, b) {return f(g(a), b);},
                g(ar[ar.length - 1]),
                ar.slice(0, -1));
};

var sum = function(l) {
  return reduce(plus, 0, l);
};
var product = function(l) {
  return reduce(mult, 1, l);
};

var listMean = function(l) {
  return reduce(plus, 0, l) / l.length;
};
var listVar = function(l, mu) {
  var mu = mu === undefined ? listMean(l) : mu;
  return mapReduce1(plus, function(a) {
    return (a - mu) * (a - mu);
  }, l) / l.length;
};
var listStdev = function(l, mu) {
  return Math.sqrt(listVar(l, mu));
};

var normalize = function(xs) {
  var Z = sum(xs);
  return map(function(x) {
    return x / Z;
  }, xs);
};

var all = function(p, l) {
  if (l.length === 0) {
    return true
  } else {
    return mapReduce1(and, p, l);
  }
};

var any = function(p, l) {
  if (l.length === 0) {
    return false
  } else {
    return mapReduce1(or, p, l);
  }
};

var zip = function(xs, ys) {
  return map2(function(x, y) { return [x, y]},
              xs,
              ys)
};

var filter = function(fn, ar) {
  var helper = function(i, j) {
    var n = j - i + 1;
    if (n == 0) {
      return [];
    } else if (n == 1) {
      return (fn(ar[i]) ? [ar[i]] : []);
    } else {
      var n1 = Math.ceil(n / 2);
      return helper(i, i + n1 - 1).concat(helper(i + n1, j));
    }
  }

  return helper(0, ar.length - 1)
};

var find = function(f, ar) {
  var n = ar.length;
  var helper = function(i) {
    if (i === n) {
      return undefined;
    } else if (f(ar[i])) {
      return ar[i];
    } else {
      return helper(i + 1);
    }
  }
  return helper(0);
};

var remove = function(a, ar) {
  return filter(function(e) {
    return a != e;
  }, ar);
};

var insertAt = function(ar, i, x) {
  return ar.slice(0, i).concat([x]).concat(ar.slice(i));
}

var removeAt = function(ar, i) {
  return ar.slice(0, i).concat(ar.slice(i + 1));
}

var replaceAt = function(ar, i, x) {
  return ar.slice(0, i).concat([x]).concat(ar.slice(i + 1));
}

var drop = function(n, ar) {
  return n > ar.length ? [] : ar.slice(n);
};

var take = function(n, ar) {
  return n >= ar.length ? ar : ar.slice(0, n);
};

var dropWhile = function(p, ar) {
  var n = ar.length;
  var helper = function(i) {
    if (i === n) {
      return n;
    }
    return p(ar[i]) ? helper(i + 1) : i;
  }
  return ar.slice(helper(0));
};

var takeWhile = function(p, ar) {
  var n = ar.length;
  var helper = function(i) {
    if (i === n) {
      return n;
    }
    return p(ar[i]) ? helper(i + 1) : i;
  }

  return ar.slice(0, helper(0));
};

var indexOf = function(x, xs) {
  // prototype method doesn't return falsy value if not found
  var i = xs.indexOf(x);
  return i < 0 ? undefined : i
};

var minWith = function(f, ar) {
  var fn = function(_ar, _best) {
    if (_ar.length === 0) {
      return _best;
    } else if (_ar[0][1] < _best[1]) {
      return fn(_ar.slice(1), _ar[0]);
    } else {
      return fn(_ar.slice(1), _best);
    }
  };
  return fn(zip(ar, map(f, ar)), [Infinity, Infinity]);
};

var maxWith = function(f, ar) {
  var fn = function(_ar, _best) {
    if (_ar.length === 0) {
      return _best;
    } else if (_ar[0][1] > _best[1]) {
      return fn(_ar.slice(1), _ar[0]);
    } else {
      return fn(_ar.slice(1), _best);
    }
  };
  return fn(zip(ar, map(f, ar)), [-Infinity, -Infinity]);
};

// bin array into items satisfying a predicate p and items not satifying it
var span = function(p, ar) {
  var n = ar.length;
  var helper = function(i, _ts, _fs) {
    return (i === n ?
            [_ts, _fs] :
            (p(ar[i]) ?
             helper(i + 1, snoc(_ts, ar[i]), _fs) :
             helper(i + 1, _ts, snoc(_fs, ar[i]))));
  };
  return helper(0, [], []);
};

// group array items by a comparator
// NB: there is still room for optimization here
var groupBy = function(cmp, ar) {
  if (ar.length === 0) {
    return [];
  } else {
    var x = ar[0];
    var sp = span(function(b) { return cmp(x, b); }, ar.slice(1));
    return [cons(x, sp[0])].concat(groupBy(cmp, sp[1]));
  }
};

var repeat = function(n, fn) {
  var helper = function(m) {
    if (m == 0) {
      return [];
    } else if (m == 1) {
      return [fn()];
    } else {
      var m1 = Math.ceil(m / 2),
          m2 = m - m1;
      return helper(m1).concat(helper(m2));
    }
  }

  return helper(n);
}


var push = function(xs, x) {
  return xs.concat([x]);
};

var compose = function(f, g) {
  return function(x) {
    return f(g(x));
  };
};

var everyOther = function(l) {
  return l.length <= 1 ? l : [l[0]].concat(everyOther(l.slice(2)));
};

var _merge = function(l1, l2, pred, key) {
  return (l1.length === 0 ?
          l2 :
          (l2.length === 0 ?
           l1 :
           (pred(key(l1[0]), key(l2[0])) ?
            [l1[0]].concat(_merge(l1.slice(1), l2, pred, key)) :
            [l2[0]].concat(_merge(l1, l2.slice(1), pred, key)))));
};

var _sort = function(l, pred, key) {
  return ((l.length <= 1) ?
          l :
          _merge(_sort(everyOther(l), pred, key),
                 _sort(everyOther(l.slice(1)), pred, key),
                 pred,
                 key));
};

var sort = function(l, pred, key) {
  return _sort(l, (pred || lt), (key || idF));
};

var sortOn = function(l, key, pred) {
  return _sort(l, (pred || lt), key);
};

var condition = function(bool) {
  factor(bool ? 0 : -Infinity);
};

var MH = function(wpplFn, samples, burn) {
  return MCMC(wpplFn, { samples: samples, burn: burn });
};

var ParticleFilter = function(wpplFn, particles) {
  return SMC(wpplFn, { particles: particles, rejuvSteps: 0 });
};

var ParticleFilterRejuv = function(wpplFn, particles, rejuvSteps) {
  return SMC(wpplFn, { particles: particles, rejuvSteps: rejuvSteps });
};

var Infer = function(options, wpplFn) {
  assert.ok(_.isObject(options), 'Infer: options argument not given.');
  var methodName = options.method;
  assert.ok(methodName, 'Infer: the option \'method\' must be specified.');
  assert.ok(_.has(_top, methodName), 'Infer: unknown method \'' + methodName + '\'.');
  var method = _top[methodName];
  return method(wpplFn, _.omit(options, 'method'));
};
