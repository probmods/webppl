// ERPs

var flip = function(theta) {
  var params = arguments.length > 0 ? arguments : [0.5];
  return sample(bernoulliERP, params);
};

var randomInteger = function(n) {
  return sample(randomIntegerERP, [n]);
};

var discrete = function(n) {
  return sample(discreteERP, [n]);
};

var categorical = function(ps, vs) {
  return vs[discrete(ps)];
}

var gaussian = function(mu, sigma) {
  var params = arguments.length > 0 ? arguments : [0, 1];
  return sample(gaussianERP, params);
};

var multivariateGaussian = function(mu, cov) {
  return sample(multivariateGaussianERP, [mu, cov]);
};

var uniform = function(a, b) {
  var params = arguments.length > 0 ? arguments: [0, 1];
  return sample(uniformERP, params);
};

var uniformDraw = function(l) {
  return l[sample(randomIntegerERP, [l.length])];
};

var dirichlet = function(alpha) {
  return sample(dirichletERP, alpha);
};

var poisson = function(mu, k) {
  return sample(poissonERP, [mu, k]);
};

var binomial = function(p, n) {
  return sample(binomialERP, [p, n]);
};

var beta = function(a, b) {
  return sample(betaERP, [a, b]);
};

var exponential = function(a) {
  return sample(exponentialERP, [a]);
};

var gamma = function(shape, scale) {
  return sample(gammaERP, [shape, scale]);
};

var deltaERP = function(v) {
  return _top.makeCategoricalERP([1.0], [v]);
};

var categoricalERP = function(ps, vs, extraParams) {
  return _top.makeCategoricalERP(ps, vs, extraParams);
};

var multiplexERP = function(vs, erps) {
  return _top.makeMultiplexERP(vs, erps);
};

var serializeERP = function(erp) {
  return _top.serializeERP(erp);
};

var deserializeERP = function(JSONString) {
  return _top.deserializeERP(JSONString);
};

// XRPs

var makeBetaBernoulli = function(pseudocounts) {
  globalStore.BBindex = 1 + (globalStore.BBindex || 0);
  var bbname = 'BB' + globalStore.BBindex;
  globalStore[bbname] = pseudocounts;
  return function() {
    var pc = globalStore[bbname];  // get current sufficient stats
    var val = sample(bernoulliERP, [pc[0] / (pc[0] + pc[1])]);  // sample from predictive.
    globalStore[bbname] = [pc[0] + val, pc[1] + !val];  // update sufficient stats
    return val;
  };
};

var makeDirichletDiscrete = function(pseudocounts) {
  var addCount = function(a, i, j) {
    var j = j || 0;
    if (a.length === 0) {
      return [];
    } else {
      return [a[0] + (i === j)].concat(addCount(a.slice(1), i, j + 1));
    }
  };
  globalStore.DDindex = 1 + (globalStore.DDindex || 0);
  var ddname = 'DD' + globalStore.DDindex;
  globalStore[ddname] = pseudocounts;
  return function() {
    var pc = globalStore[ddname];  // get current sufficient stats
    var val = sample(discreteERP, [pc]);  // sample from predictive. (doesn't need to be normalized.)
    globalStore[ddname] = addCount(pc, val); // update sufficient stats
    return val;
  };
};

// Arithmetic and other functionals

var plus = function(a, b) {
  return a + b;
};
var minus = function(a, b) {
  return a - b;
};
var mult = function(a, b) {
  return a * b;
};
var div = function(a, b) {
  return a / b;
};

var and = function(a, b) {
  return a && b
}
var or = function(a, b) {
  return a || b
}

var eq = function(a, b) {
  return a === b;
};
var neq = function(a, b) {
  return a != b;
};
var lt = function(a, b) {
  return a < b;
};
var gt = function(a, b) {
  return a > b;
};
var leq = function(a, b) {
  return a <= b;
};
var geq = function(a, b) {
  return a >= b;
};

var isEven = function(v) {
  return v % 2 === 0;
};
var isOdd = function(v) {
  return v % 2 != 0;
};

var idF = function(x) {
  return x;
};
var constF = function(f) {
  return function() {
    return f;
  };
};
var falseF = function() {
  return false;
};
var trueF = function() {
  return true;
};


// Probability computations & calculations

var MAP = function(erp) {
  return erp.MAP();
};

var expectation = function(erp, func) {
  var f = func || idF;
  var supp = erp.support([]);
  return mapReduce1(plus,
                    function(s) {
                      return Math.exp(erp.score([], s)) * f(s);
                    },
                    supp);
};

var entropy = function(erp) {
  return erp.entropy();
};

// Data structures & higher-order functions

var append = function(a, b) {
  return a.concat(b);
};
var cons = function(a, b) {
  return [a].concat(b);
};
var snoc = function(a, b) {
  return a.concat([b]);
};

var first = function(xs) {
  return xs[0];
};
var second = function(xs) {
  return xs[1];
};
var third = function(xs) {
  return xs[2];
};
var fourth = function(xs) {
  return xs[3];
};
var secondLast = function(xs) {
  return xs[xs.length - 2];
};
var last = function(xs) {
  return xs[xs.length - 1];
};
var rest = function(xs) {
  return xs.slice(1);
};

var map = function(fn, ar) {
  return ar.length === 0 ? [] : [fn(ar[0])].concat(map(fn, ar.slice(1)));
};

var map2 = function(f, l1, l2) {
  return (l1.length === 0 || l2.length === 0 ?
          [] :
          [f(l1[0], l2[0])].concat(map2(f, l1.slice(1), l2.slice(1))));
};

var mapN = function(f, n) {
  var fn = function(i, _acc) {return i === n ? _acc : fn(i + 1, snoc(_acc, f(i)))};
  return fn(0, []);
}

var mapIndexed = function(f, l) {
  var fn = function(ls, i, _acc) {
    return ls.length === 0 ?
        _acc :
        fn(rest(ls), i + 1, snoc(_acc, f(i, first(ls))))
  };
  return fn(l, 0, []);
}

var _ringAround = function(l, n) {
  return l.slice(n).concat(l.slice(0, n));
};

var ringForward = function(l, n) {
  return _ringAround(l, n === undefined ? -1 : -n);
};

var ringBackward = function(l, n) {
  return _ringAround(l, n === undefined ? 1 : n);
};

var mapPairs2 = function(f, l1, l2) {
  var res = map(function(a) {
    return map(function(b) {
      return f(a, b);
    }, l2)
  }, l1);
  return [].concat.apply([], res); // flatten
};

var mapPairsC = function(f, l) {
  var fn = function(l1, l2, acc) {
    return (l2.length === 0 ? acc :
            fn(l1.slice(1),
               l2.slice(1),
               acc.concat(map(function(b) {
                 return f(l1[0], b);
               }, l2)))
    );
  };
  return fn(l, l.slice(1), []);
};

var mapPairsNC = function(f, l) {
  var res = mapPairs2(function(a, b) {
    return a === b ? undefined : f(a, b);
  }, l, l);
  return remove(undefined, res);
};

var mapObject = function(fn, obj) {
  return _.object(
      map(
      function(kv) {
        return [kv[0], fn(kv[0], kv[1])]
      },
      _.pairs(obj))
  );
};

var reduce = function(fn, init, ar) {
  return ar.length === 0 ? init : fn(ar[0], reduce(fn, init, ar.slice(1)));
};

var mapReduce = function(f, init, g, ar) {
  // specialized to above reduce
  return reduce(function(a, b) {return f(g(a), b);},
                g(init),
                ar);
};

var mapReduce1 = function(f, g, ar) {
  // specialized to above reduce
  return reduce(function(a, b) {return f(g(a), b);},
                g(ar[ar.length - 1]),
                ar.slice(0, -1));
};

var sum = function(l) {
  return reduce(plus, 0, l);
};
var product = function(l) {
  return reduce(mult, 1, l);
};

var listMean = function(l) {
  return reduce(plus, 0, l) / l.length;
};
var listVar = function(l, mu) {
  var mu = mu === undefined ? listMean(l) : mu;
  return mapReduce1(plus, function(a) {
    return (a - mu) * (a - mu);
  }, l) / l.length;
};
var listStdev = function(l, mu) {
  return Math.sqrt(listVar(l, mu));
};

var all = function(p, l) {
  return mapReduce1(and, p, l);
};
var any = function(p, l) {
  return mapReduce1(or, p, l);
};

var zip = function(xs, ys) {
  return xs.length === 0 ?
      [] :
      [[xs[0], ys[0]]].concat(zip(xs.slice(1), ys.slice(1)));
};

var filter = function(fn, ar) {
  return ar.length === 0 ?
      [] :
      append(fn(ar[0]) ? [ar[0]] : [], filter(fn, ar.slice(1)));
};

var find = function(f, ar) {
  return ar.length === 0 ? undefined : (f(ar[0]) ? ar[0] : find(f, ar.slice(1)));
};

var remove = function(a, ar) {
  return filter(function(e) {
    return a != e;
  }, ar);
};

var insertAt = function(ar, i, x) {
  return ar.slice(0, i).concat([x]).concat(ar.slice(i));
}

var removeAt = function(ar, i) {
  return ar.slice(0, i).concat(ar.slice(i + 1));
}

var replaceAt = function(ar, i, x) {
  return ar.slice(0, i).concat([x]).concat(ar.slice(i + 1));
}

var drop = function(n, ar) {
  return n > ar.length ? [] : ar.slice(n);
};
var take = function(n, ar) {
  return n >= ar.length ? ar : ar.slice(0, n);
};
var dropWhile = function(p, ar) {
  return p(ar[0]) ? dropWhile(p, ar.slice(1)) : ar;
};
var takeWhile = function(p, ar) {
  return p(ar[0]) ? cons(ar[0], takeWhile(p, ar.slice(1))) : [];
};

var indexOf = function(x, xs) {
  // prototype method doesn't return falsy value if not found
  var i = xs.indexOf(x);
  return i < 0 ? undefined : i
};

var minWith = function(f, ar) {
  var fn = function(_ar, _best) {
    if (_ar.length === 0) {
      return _best;
    } else if (_ar[0][1] < _best[1]) {
      return fn(_ar.slice(1), _ar[0]);
    } else {
      return fn(_ar.slice(1), _best);
    }
  };
  return fn(zip(ar, map(f, ar)), [Infinity, Infinity]);
};

var maxWith = function(f, ar) {
  var fn = function(_ar, _best) {
    if (_ar.length === 0) {
      return _best;
    } else if (_ar[0][1] > _best[1]) {
      return fn(_ar.slice(1), _ar[0]);
    } else {
      return fn(_ar.slice(1), _best);
    }
  };
  return fn(zip(ar, map(f, ar)), [-Infinity, -Infinity]);
};

var span = function(p, ar) {
  var fn = function(ar, _ts, _fs) {
    return (ar.length === 0 ?
            [_ts, _fs] :
            (p(ar[0]) ?
             fn(ar.slice(1), snoc(_ts, ar[0]), _fs) :
             fn(ar.slice(1), _ts, snoc(_fs, ar[0]))));
  };
  return fn(ar, [], []);
};

var groupBy = function(cmp, ar) {
  if (ar.length === 0) {
    return [];
  } else {
    var x = ar[0];
    var sp = span(function(b) { return cmp(x, b); }, ar.slice(1));
    return [cons(x, sp[0])].concat(groupBy(cmp, sp[1]));
  }
};

var repeat = function(n, fn) {
  return n === 0 ? [] : append(repeat(n - 1, fn), [fn(n - 1)]);
};

var push = function(xs, x) {
  return xs.concat([x]);
};

var compose = function(f, g) {
  return function(x) {
    return f(g(x));
  };
};

var everyOther = function(l) {
  return l.length <= 1 ? l : [l[0]].concat(everyOther(l.slice(2)));
};

var _merge = function(l1, l2, pred, key) {
  return (l1.length === 0 ?
          l2 :
          (l2.length === 0 ?
           l1 :
           (pred(key(l1[0]), key(l2[0])) ?
            [l1[0]].concat(_merge(l1.slice(1), l2, pred, key)) :
            [l2[0]].concat(_merge(l1, l2.slice(1), pred, key)))));
};

var _sort = function(l, pred, key) {
  return ((l.length <= 1) ?
          l :
          _merge(_sort(everyOther(l), pred, key),
                 _sort(everyOther(l.slice(1)), pred, key),
                 pred,
                 key));
};

var sort = function(l, pred, key) {
  return _sort(l, (pred || lt), (key || idF));
};

var sortOn = function(l, key, pred) {
  return _sort(l, (pred || lt), key);
};

var condition = function(bool) {
  factor(bool ? 0 : -Infinity);
};
